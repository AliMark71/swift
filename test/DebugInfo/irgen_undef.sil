// RUN: %target-swiftc_driver -Xfrontend -disable-debugger-shadow-copies -O -g -emit-ir %s | %FileCheck %s
sil_stage canonical

import Swift
import Builtin

// CHECK-LABEL: define {{.*}} @just_undef
sil @just_undef : $@convention(thin) (Builtin.Int64) -> (Builtin.Int64) {
bb0(%0 : $Builtin.Int64):
// CHECK: call void @llvm.dbg.value(metadata i64 undef, metadata ![[JUST_UNDEF_VAR:[0-9]+]], metadata !DIExpression())
debug_value undef : $Builtin.Int64, var, name "optimizedout"
return %0 : $Builtin.Int64
}

// CHECK-LABEL: define {{.*}} @arithmetic
sil @arithmetic : $@convention(thin) (Builtin.Int64) -> (Builtin.Int64) {
bb0(%0 : $Builtin.Int64):
// CHECK: call void @llvm.dbg.value(metadata i64 %0, metadata ![[CURRENT_VAR:[0-9]+]], metadata !DIExpression())
debug_value %0 : $Builtin.Int64, var, name "current", type $Int, expr op_fragment:#Int._value
// FIXME: It should work with the fragment, as it should be noop.
// CHECK: call void @llvm.dbg.value(metadata i64 %0, metadata ![[PREVIOUS_VAR:[0-9]+]], metadata !DIExpression(DW_OP_consts, 1, DW_OP_minus, DW_OP_stack_value))
debug_value %0 : $Builtin.Int64, var, name "previous", type $Int, expr op_consts:1:op_minus //:op_fragment:#Int._value
// CHECK: call void @llvm.dbg.value(metadata i64 %0, metadata ![[NEXT_VAR:[0-9]+]], metadata !DIExpression(DW_OP_constu, 12, DW_OP_plus, DW_OP_stack_value))
debug_value %0 : $Builtin.Int64, var, name "next", type $Int, expr op_constu:12:op_plus //:op_fragment:#Int._value
return %0 : $Builtin.Int64
}

// CHECK: ![[JUST_UNDEF_VAR]] = !DILocalVariable(name: "optimizedout"
// CHECK: ![[CURRENT_VAR]] = !DILocalVariable(name: "current"
// CHECK: ![[PREVIOUS_VAR]] = !DILocalVariable(name: "previous"
// CHECK: ![[NEXT_VAR]] = !DILocalVariable(name: "next"
