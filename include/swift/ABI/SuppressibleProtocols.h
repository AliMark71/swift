//===--- SuppressibleProtocols.h - Suppressible protocol meta ---*- C++ -*-===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2024 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//
//
// This header declares various types for suppressible protocols, such as
// Copyable.
//
//===----------------------------------------------------------------------===//

#ifndef SWIFT_ABI_SUPPRESSIBLEPROTOCOLS_H
#define SWIFT_ABI_SUPPRESSIBLEPROTOCOLS_H

#include <cstdint>
#include <iterator>

namespace swift {

/// Describes a "suppressible" protocol, such as Copyable, which is assumed to
/// hold for all types unless explicitly suppressed.
enum class SuppressibleProtocolKind : uint8_t {
#define SUPPRESSIBLE_PROTOCOL(Name, Bit) Name = Bit,
#include "swift/ABI/SuppressibleProtocols.def"
};

/// A set of suppressible protocols, whose bits correspond to the cases of
/// SuppressibleProtocolKind.
class SuppressibleProtocolSet {
  using StorageType = uint16_t;
  
  /// The stored bits.
  StorageType bits;

  /// Retrieve the mask for this bit.
  static StorageType getMask(SuppressibleProtocolKind kind) {
    return 1 << static_cast<uint8_t>(kind);
  }
  
public:
  explicit constexpr SuppressibleProtocolSet(StorageType bits) : bits(bits) {}
  constexpr SuppressibleProtocolSet() : bits(0) {}

  /// Retrieve the raw bits that describe this set.
  StorageType rawBits() const { return bits; }

  /// Whether the set contains no protocols.
  bool empty() const { return bits == 0; }

  /// Check whether the set contains the specific suppressible protocol.
  bool contains(SuppressibleProtocolKind kind) const {
    return bits & getMask(kind);
  }

  /// Insert the suppressible protocol into the set.
  void insert(SuppressibleProtocolKind kind) {
    bits = bits | getMask(kind);
  }

  /// Remove the given suppressible protocol from the set.
  void remove(SuppressibleProtocolKind kind) {
    uint16_t mask = getMask(kind);
    bits = bits & ~mask;
  }

  /// Clear out all of the protocols from the set.
  void clear() { bits = 0; }

#define SUPPRESSIBLE_PROTOCOL(Name, Bit)             \
  bool contains##Name() const {                      \
    return contains(SuppressibleProtocolKind::Name); \
  }
#include "swift/ABI/SuppressibleProtocols.def"

  /// Produce a suppressible protocol set containing all known suppressible
  /// protocols.
  static SuppressibleProtocolSet allKnown() {
    SuppressibleProtocolSet result;
#define SUPPRESSIBLE_PROTOCOL(Name, Bit)           \
    result.insert(SuppressibleProtocolKind::Name);
#include "swift/ABI/SuppressibleProtocols.def"
    return result;
  }

  /// Determine whether this protocol set contains any unknown protocols.
  ///
  /// This can occur when an older Swift runtime is working with metadata
  /// or mangled names generated by a newer compiler that has introduced
  /// another kind of suppressible protocol. The Swift runtime will need to
  /// step lightly around protocol sets with unknown protocols.
  bool hasUnknownProtocols() const {
    return !(*this - allKnown()).empty();    
  }
  
  class iterator {
    /// The bits remaining in the set, which will be 0 when we have hit the
    /// end.
    unsigned bitsRemaining;

    /// The current bit index
    unsigned currentBitIndex;

    /// Advance to the next set bit.
    void advance() {
      // Already at the end.
      if (bitsRemaining == 0)
        return;

      do {
        ++currentBitIndex;
        unsigned mask = 1 << currentBitIndex;
        if ((bitsRemaining & mask) != 0)
          break;
      } while (true);
    }

    /// Clear out the current bit, then advance.
    void clearAndAdvance() {
      // Clear the current bit.
      unsigned mask = 1 << currentBitIndex;
      bitsRemaining = bitsRemaining & ~mask;

      // Advance to the next set bit, or stop if we're done.
      advance();
    }

  public:
    using difference_type = int;
    using value_type = SuppressibleProtocolKind;
    using pointer = void;
    using reference = value_type;
    using iterator_category = std::input_iterator_tag;

    iterator() : bitsRemaining(0), currentBitIndex(0) { }
    iterator(unsigned bitsRemaining)
        : bitsRemaining(bitsRemaining), currentBitIndex(0)
    {
      if ((bitsRemaining & 0x01) == 0)
        advance();
    }

    iterator &operator++() {
      clearAndAdvance();
      return *this;
    }

    iterator operator++(int) {
      iterator tmp = *this;
      ++(*this);
      return tmp;
    }

    SuppressibleProtocolKind operator*() const {
      return static_cast<SuppressibleProtocolKind>(currentBitIndex);
    }

    friend bool operator ==(iterator lhs, iterator rhs) {
      if (lhs.bitsRemaining != rhs.bitsRemaining)
        return false;

      if (lhs.bitsRemaining == 0)
        return true;

      return lhs.currentBitIndex == rhs.currentBitIndex;
    }

    friend bool operator !=(iterator lhs, iterator rhs) {
      return !(lhs == rhs);
    }
  };

  iterator begin() const { return iterator(rawBits()); }
  iterator end() const { return iterator(0); }

  friend bool operator==(
      SuppressibleProtocolSet lhs, SuppressibleProtocolSet rhs) {
    return lhs.bits == rhs.bits;
  }

  friend bool operator!=(
      SuppressibleProtocolSet lhs, SuppressibleProtocolSet rhs) {
    return lhs.bits != rhs.bits;
  }

  friend SuppressibleProtocolSet operator-(
      SuppressibleProtocolSet lhs, SuppressibleProtocolSet rhs) {
    return SuppressibleProtocolSet(lhs.bits & ~rhs.bits);
  }

  SuppressibleProtocolSet &operator-=(SuppressibleProtocolSet rhs) {
    bits = bits & ~rhs.bits;
    return *this;
  }

  friend SuppressibleProtocolSet operator|(
      SuppressibleProtocolSet lhs, SuppressibleProtocolSet rhs) {
    return SuppressibleProtocolSet(lhs.bits | rhs.bits);
  }

  SuppressibleProtocolSet &operator|=(SuppressibleProtocolSet rhs) {
    bits |= rhs.bits;
    return *this;
  }
};

/// Retrieve the name for the given suppressible protocol.
static inline const char *
getSuppressibleProtocolKindName(SuppressibleProtocolKind kind) {
  switch (kind) {
#define SUPPRESSIBLE_PROTOCOL(Name, Bit)             \
  case SuppressibleProtocolKind::Name: return #Name;
#include "swift/ABI/SuppressibleProtocols.def"
  }

  return "<unknown suppressible protocol kind>";
}

} // end namespace swift
#endif // SWIFT_ABI_SUPPRESSIBLEPROTOCOLS_H
